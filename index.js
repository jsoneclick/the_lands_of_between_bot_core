import { Telegraf } from "telegraf";
import fetch from "node-fetch";

const bot = new Telegraf("YOUR_BOT_TOKEN");

// –∫–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply("–ü—Ä–∏–≤—ñ—Ç üëã –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –≥—Ä–∏, —ñ —è –∑–Ω–∞–π–¥—É —ó—ó —É Steam.");
});

// –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä–∞ ‚Äî —Ç—Ä–∞–∫—Ç—É—î–º–æ —è–∫ –Ω–∞–∑–≤—É –≥—Ä–∏
bot.on("text", async (ctx) => {
  const name = ctx.message.text.trim();
  console.log("–û—Ç—Ä–∏–º–∞–≤ –∑–∞–ø–∏—Ç:", name);

  if (!name) {
    ctx.reply("‚ö†Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –≥—Ä–∏!");
    return;
  }

  try {
    // 1) –ü–æ—à—É–∫ —É Steam Store
    const searchResp = await fetch(
      `https://store.steampowered.com/api/storesearch/?term=${encodeURIComponent(
        name
      )}&cc=us&l=en`
    );
    const searchData = await searchResp.json();
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É:", searchData);

    if (!searchData.items || searchData.items.length === 0) {
      ctx.reply("‚ùå –ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }

    const match = searchData.items[0];
    console.log("–ó–±—ñ–≥:", match);

    // 2) –î–µ—Ç–∞–ª—ñ –≥—Ä–∏
    const detailsResp = await fetch(
      `https://store.steampowered.com/api/appdetails?appids=${match.id}&l=uk`
    );
    const detailsData = await detailsResp.json();
    const gameInfo = detailsData[match.id].data;
    console.log("–î–∞–Ω—ñ –≥—Ä–∏:", gameInfo);

    // 3) –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    let text = `üéÆ *${gameInfo.name}*\n\n`;
    text += `*–ñ–∞–Ω—Ä–∏:* ${gameInfo.genres
      ?.map((g) => g.description)
      .join(", ")}\n\n`;
    text += `*–û–ø–∏—Å:* ${gameInfo.short_description}`;

    // –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É + —Ç–µ–∫—Å—Ç
    await ctx.replyWithPhoto(
      { url: gameInfo.header_image },
      { caption: text, parse_mode: "Markdown" }
    );

  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞:", err);
    ctx.reply("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É.");
  }
});

bot.launch();
